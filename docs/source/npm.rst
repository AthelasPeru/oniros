npm Scripts
==============

What?? npm scripts?? how about **Gulp**, **broccoli**, **grunt**, **<insert yopur favorite building tool here>**???

Well, if you look at our `tags <https://github.com/AthelasPeru/oniros/releases>`_, you will see version **v0.5**. It was build with a brilliant gulp process. So, what happened? Well, it was more than one thing, some of our programmers had problems with gulp running flawlessly on their machines, others where used to grunt, and this made then resistant to try oniros. 

Then the whole `npm scripts <https://css-tricks.com/why-npm-scripts/>`_ movement started catching our attention, and having started as a sysadmin, `ondoheer <http://www.ondoheer.com>`_ decided it was easier to mantain and teach plain shell commands than other build tools.

The time it took to build these scripts was **significantly** lower than the time it took to build our gulp process, and it was quickly tested on all of our programmers machines without a problem (only Linux and OSX so far). We are just scratiching the surface of what npm scripts can do, but we wanted to start using it and improving it as we rolled.

How to use them
++++++++++++++++++

If you have used any build tool before, it's as simple as that. just run::
    
    npm run <scriptname>

and thats all!

Scripts
----------

Build All!
***********

by running::

    $ npm run build:all

you will be excuting all of the necessary scripts to deploy your project, read below to understand what each segment of scripts does.

Css
******

The css of Oniros is divided in three modular parts. 


**login** refers to the wordpress login screen.
**main** refers to the Wordpress theme.

The css scripts build work with the scss files for the main, admin and login areas. They also process the svg files located in the **source/sprite** folder and adds their shortcodes to the **source/css/main/components/_sprite.scss** file. **Postcss** aplies the autoprefixer to all the css files generated by this scripts.

All of the processed files will be processed to the **/dist** folder, mantaining the structure they had in the **/source/** folder.

To run the scripts for *main*, *admin* and *login* together just do:: 

    $ npm run all:build:css 


You can also run them independently for each area::

    $ npm run main:build:css 

    $ npm run login:scss:min

    $ npm run admin:scss:min


UnCSS
**********

TODO


Javascript
*************

These npm scripts look to uglify and minimize the scripts that should go in the head and footer of the documment independently.
Oniros comes with different files already created, the *head* files are empty, but the *main* files are templates for you to work with, primarily **ajax-query.js** which is a template to work with ajax, and app.js, where all your general code should reside (meaning code that will work globally for all pages or has guards to prevent it to throw exceptions or break when run on the wrong page). **single** folder contains the code you will enqueue to run on specific pages.

Right now **Oniros** comes with a script for each section, you can run them all together by running::

    $ npm run all:build:js


or run them independently by running::
    
    $ npm run main:build:js

    $ npm run head:build:js

    $ npm run single:build:js


**NOTE CREATING NEW SINGLE JS FILES**: A new script needs to be created for each specific single file, and added to the **all:build:js** script if you want it to be included in the general script.

Right now the **single** folder only contains a script that is supposed to be run on the front page to animate a slick slider instance.    


Images
************

Oniros npm scripts allow you to process your images by simply droping them into the right folder.

**Image optimizing**: optimizes images using *imagemin*, compressing them without loosing much quality. **Any image** found in the *source/img* folder will be processed to it's respective *dist/img* copy. 

just run::
    
    $ npm run imagemin

**svg sprite generation**: creates an svg sprite with all the svg's found in the **source/sprite** folder, adds *scss* mixins for you to use them in your project easily into the **source/scss/main/components/_sprite.scss** file.

just run::
    
    $ npm run sprite:svg 


**Real favicons**: creates a set of favicons using the `Real Favicon Generator <http://www.realfavicongenerator.com>`_ API. It will look for a **favicon.png** file in the **source/img** folder and process it. All of the resulting favicons are already being called from the WP header.php file.

just run::
    
    $ npm run favicon



Serve and Watch
*****************

While working on localhost or connected remotely, it's always easier to keep a browserify server running and a system process to keep an eye on our assets files modifications. This way every change we make will be processed on the go.

You can watch for individual groups of files, like scss or js, but we recommend you just watch them all with::

     $ npm run watch:all 



Other scripts
*****************

Helper scripst aren't described here, but if you know how to work with a unix shell, you shouldn't have a problem understanding them and modifying them to fit your needs.
  